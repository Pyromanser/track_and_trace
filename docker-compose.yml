services:
  app: &app
    container_name: app
    build: .
    volumes:
      - ./core:/home/appuser/app/core
      - ./track_and_trace:/home/appuser/app/track_and_trace
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - app_net
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2

  db:
    container_name: db
    image: postgres:16-alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_net
    expose:
      - 5432
    ports:
      - "5432:5432"
    env_file:
      - .env
    restart: on-failure
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:7-alpine
    volumes:
      - redis:/var/lib/redis/data
    networks:
      - app_net
    expose:
      - 6379
    ports:
      - "6379:6379"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4-alpine
    restart: on-failure
    networks:
      - app_net
    expose:
      - 4369
      - 5671
      - 5672
      - 15672
      - 25672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5672"]
      interval: 5s
      timeout: 15s
      retries: 1

  celery:
    <<: *app
    container_name: celery
    expose: []
    ports: []
    environment:
      C_FORCE_ROOT: 'true'
    command: celery -A core worker -B -l INFO

networks:
  app_net:

volumes:
  db_data:
  redis:
  rabbitmq_data: